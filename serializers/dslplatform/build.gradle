group 'com.github.jvm-serializers-ng'
version '1.0-SNAPSHOT'

apply plugin: "java"
apply plugin: "com.github.dkorotych.gradle-maven-exec"
apply plugin: "idea"



// Earlier versions of Gradle
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        dependencies {
            classpath "gradle.plugin.com.github.dkorotych.gradle.maven.exec:gradle-maven-exec-plugin:1.2.2.1"

        }
    }
}
repositories {
    mavenCentral()

}


dependencies {
    compile project(':core')
    compile 'com.dslplatform:dsl-json-java8:1.7.1'
    //annotationProcessor 'com.dslplatform:dsl-json-java8:1.7.1'
    testCompile project (path: ':core', configuration: 'testArchives')
}

project.ext.generatedSourcesDir = 'src/main/generated-sources'
project.ext.monoInstalled = false

sourceSets {
    main
            {
                java {
                    srcDirs = ['src/main/java',generatedSourcesDir]
                }

            }
}

idea {
    module {
        // Marks the already(!) added srcDir as "generated"
        generatedSourceDirs += file(generatedSourcesDir)
    }
}

project.ext.checkMonoExists = { ->

    Object result = exec{
        def command = "command -v mono"
        ignoreExitValue = true
        executable "bash" args "-l", "-c", command
    }
    if(result.getExitValue()==0){
        println "Has Mono"
        return true
    }else{
        print "No Mono"
        return false
    }
}



task generateDSL(type: MavenExec) {
    if(checkMonoExists) {
        goals 'generate-sources'
    }
    else {
        goals 'initialize'
    }
}

task cleanDSL(type: MavenExec) {
    if(checkMonoExists) {
        goals 'clean'
    }
    else {
        goals 'initialize'
    }
}

compileJava{
    dependsOn generateDSL
}

clean{
    dependsOn cleanDSL
}



tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}