#! /usr/bin/env bash
# ------------------------------------------------------------------------------
# Reads in the combined stats file (generated by mk-stats.sh) and writes to
# a Javascript file (website/benchmarkResults.js) so the results can be viewed
# with the dynamic results website (website/index.html).
# ------------------------------------------------------------------------------
set -e

input_file_rel="results/stats.txt"
output_file_rel="website/benchmarkResults.js"

# Locate the script file.  Cross symlinks if necessary.
loc="$0"
while [ -h "$loc" ]; do
	ls=`ls -ld "$loc"`
	link=`expr "$ls" : '.*-> \(.*\)$'`
	if expr "$link" : '/.*' > /dev/null; then
		loc="$link"  # Absolute link
	else
		loc="`dirname "$loc"`/$link"  # Relative link
	fi
done

base_dir=`dirname "$loc"`

if [ $# -ne 0 ]; then
    echo "Expecting no arguments, got $#." 1>&2
    exit 1
fi

input_file="$base_dir/$input_file_rel"
if [ ! -f "$input_file" ]; then
    echo "Couldn't find input file \"$input_file\"." 1>&2
    echo "This file is typically generated by running \"./mk-stats.sh\"." 1>&2
    exit 1
fi

output_file="$base_dir/$output_file_rel"
output_dir=$(dirname "$output_file")
if [ ! -d "$output_dir" ]; then
    echo "Couldn't find output directory \"$output_dir\"." 1>&2
    exit 1
fi

# Build classpath.
cpgen=$(cat build/gen-cp)
cplib=$(cat build/lib-cp)
sep=':' 
# cygwin
case "`uname`" in
	CYGWIN*) sep=';' ;;
esac
cp="./build/bytecode/main$sep$cpgen$sep$cplib"

echo "Writing results to: $output_file"
java -cp "$cp" serializers.WriteResultsToJavascript "$input_file" "$output_file"
echo "Open \"$output_dir/index.html\" in a web browser to see graphs."
